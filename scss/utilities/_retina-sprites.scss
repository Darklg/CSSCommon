@charset "UTF-8";

/* ----------------------------------------------------------
  Retina sprites
---------------------------------------------------------- */

$create-class-for-sprite-img: true;

/* Load sprites
-------------------------- */

.spritesbgfix {
    background: $sprites2x;
    background: $sprites;
}

/* Mixin
-------------------------- */

/* Src : https://github.com/AdamBrodzinski/Retina-Sprites-for-Compass */

@import "compass/utilities/sprites";

// Include compass sprite helpers

@mixin retina-sprite($name, $hover: false, $active: false, $type: 0) {
    @include _retina-sprite($name, $sprites, $sprites2x, $hover, $active, false);
}

// Change only background-position. A lot less generated code.
@mixin retina-sprite-lite($name, $hover: false, $active: false) {
    @include _retina-sprite($name, $sprites, $sprites2x, $hover, $active, true);
}

// The general purpose retina sprite mixin.
//
//    @include retina-sprite(name, $spritemap1, $spritemap2)
//    @include retina-sprite(name, $spritemap1, $spritemap2[, $dimensions: true, $pad: 0])
//
//    If `dimensions` is true, then width/height will also be set.
//
//    if `pad` is non-zero, then that's how much padding the element will have (requires
//    $spacing on the sprite maps). Great for iPhone interfaces to make hit areas bigger.
//
@mixin _retina-sprite($name, $sprites, $sprites2x, $hover, $active, $onlypos, $dimensions: true, $pad: 0) {
    @include _retina-sprite-1x($name, $sprites, $sprites2x, $hover, $active, $onlypos, $dimensions, $pad);
    @media (-webkit-min-device-pixel-ratio: 1.5), (min-device-pixel-ratio: 1.5), (min-resolution: 144dpi) {
        @include _retina-sprite-2x($name, $sprites, $sprites2x, $hover, $active, $onlypos, $dimensions, $pad);
    }
}

@mixin _retina-sprite-1x($name, $sprites, $sprites2x, $hover, $active, $onlypos, $dimensions: true, $pad: 0) {
    @if $dimensions == true {
        @include sprite-dimensions($sprites, $name);
    }
    @if $onlypos == true {
        background-position: sprite-position($sprites, $name, -$pad, -$pad);
    }
    @else {
        background: sprite-url($sprites) no-repeat sprite-position($sprites, $name, -$pad, -$pad);
    }
    @if $hover == true {
        $name_hover: $name + _hover;
        &:hover {
            background-position: sprite-position($sprites, $name_hover, -$pad, -$pad);
        }
    }
    @if $active == true {
        $name_active: $name + _active;
        &:active {
            background-position: sprite-position($sprites, $name_active, -$pad, -$pad);
        }
    }
    @if $pad > 0 {
        padding: $pad;
    }
}

@mixin _retina-sprite-2x($name, $sprites, $sprites2x, $hover, $active, $onlypos, $dimensions: true, $pad: 0) {
    $bg-size: ceil(image-width(sprite-path($sprites2x)) / 2);
    & {
        $pos: sprite-position($sprites2x, $name, -$pad * 2, -$pad * 2);
        @if $onlypos == true {
            background-position: nth($pos, 1) / 2 nth($pos, 2) / 2;
        }
        @else {
            background: sprite-url($sprites2x) no-repeat (nth($pos, 1) / 2 nth($pos, 2) / 2);
            background-size: $bg-size auto;
        }
        //  sprite-path() returns the path of the generated sprite sheet, which
        //  image-width() calculates the width of. the ceil() is in place in case
        //  you have sprites that have an odd-number of pixels in width
        @if $hover == true {
            $name_hover: $name + _hover;
            // create myButton_hover and assign it
            &:hover {
                $pos: sprite-position($sprites2x, $name_hover, -$pad * 2, -$pad * 2);
                background-position: nth($pos, 1) / 2 nth($pos, 2) / 2;
            }
        }
        @if $active == true {
            $name_active: $name + _active;
            // create myButton_active and assign it
            &:active {
                $pos: sprite-position($sprites2x, $name_active, -$pad * 2, -$pad * 2);
                background-position: nth($pos, 1) / 2 nth($pos, 2) / 2;
            }
        }
    }
}

/* Icons
-------------------------- */

@if($create-class-for-sprite-img) {
    @each $clazz in listFiles("images/css-sprite/*") {
        .icn.#{$clazz} {
            @extend .spritesbgfix;
            @include _retina-sprite-1x(#{$clazz}, $sprites, $sprites2x, 0 ,0, true);
        }
    }
    @media (-webkit-min-device-pixel-ratio: 1.5), (min-device-pixel-ratio: 1.5), (min-resolution: 144dpi) {
        .spritesimg2x {
            $bg-size: ceil(image-width(sprite-path($sprites2x)) / 2);
            background: $sprites2x;
            background-size: $bg-size auto;
        }
        @each $clazz in listFiles("images/css-sprite-2x/*") {
            .icn.#{$clazz} {
                @extend .spritesimg2x;
            }
        }
    }
}

